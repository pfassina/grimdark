name: Continuous Integration

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install Nix
      uses: cachix/install-nix-action@v22
      with:
        nix_path: nixpkgs=channel:nixos-unstable
    
    - name: Setup Nix cache
      uses: cachix/cachix-action@v12
      with:
        name: grimdark-srpg
        authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
        skipPush: ${{ github.event_name == 'pull_request' }}
    
    - name: Verify Nix flake
      run: nix flake check
    
    - name: Run code quality checks
      run: python run_tests.py --quality
    
    - name: Run unit tests
      run: python run_tests.py --unit
    
    - name: Run integration tests
      run: python run_tests.py --integration
    
    - name: Run legacy tests
      run: python run_tests.py --legacy
    
    - name: Verify demo functionality
      run: python run_tests.py --demo
    
    - name: Generate coverage report
      run: nix develop --command pytest tests/ --cov=src --cov-report=xml --cov-report=html
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  performance:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install Nix
      uses: cachix/install-nix-action@v22
      with:
        nix_path: nixpkgs=channel:nixos-unstable
    
    - name: Setup Nix cache
      uses: cachix/cachix-action@v12
      with:
        name: grimdark-srpg
        authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
        skipPush: false
    
    - name: Run performance benchmarks
      run: python run_tests.py --performance
    
    - name: Store benchmark results
      uses: benchmark-action/github-action-benchmark@v1
      with:
        tool: 'pytest'
        output-file-path: benchmark-results.json
        github-token: ${{ secrets.GITHUB_TOKEN }}
        auto-push: true
        comment-on-alert: true
        alert-threshold: '200%'
        fail-on-alert: false

  security:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install Nix
      uses: cachix/install-nix-action@v22
      with:
        nix_path: nixpkgs=channel:nixos-unstable
    
    - name: Run security scan
      run: |
        # Basic security checks
        nix develop --command python -m pip list --format=json > requirements.json
        
        # Check for common security issues in Python code
        if command -v bandit >/dev/null 2>&1; then
          nix develop --command bandit -r src/ -f json -o bandit-results.json || true
        fi
    
    - name: Upload security results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: security-results
        path: |
          requirements.json
          bandit-results.json